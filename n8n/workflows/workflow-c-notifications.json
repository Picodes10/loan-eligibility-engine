{
  "name": "Workflow C: User Notification",
  "nodes": [
    {
      "parameters": {
        "path": "notification-trigger",
        "options": {}
      },
      "name": "Notification Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        240,
        300
      ],
      "webhookId": "notification-trigger-webhook"
    },
    {
      "parameters": {
        "functionCode": "// User Notification Workflow\n// Triggered after matching process completes\n\nconst webhookData = $input.all()[0].json;\n\nconsole.log('User Notification workflow triggered');\nconsole.log(`Workflow type: ${webhookData.workflow_type}`);\nconsole.log(`Users processed: ${webhookData.users_processed}`);\nconsole.log(`Matches created: ${webhookData.matches_created}`);\n\n// Validate webhook data\nif (webhookData.workflow_type !== 'trigger_notifications') {\n  throw new Error('Invalid notification trigger type');\n}\n\nif (!webhookData.matching_completed) {\n  console.log('Matching not completed, skipping notifications');\n  return [{\n    json: {\n      skip_notifications: true,\n      reason: 'Matching process not completed'\n    }\n  }];\n}\n\nif (!webhookData.matches_created || webhookData.matches_created === 0) {\n  console.log('No matches created, skipping notifications');\n  return [{\n    json: {\n      skip_notifications: true,\n      reason: 'No matches to notify about'\n    }\n  }];\n}\n\n// Prepare notification request\nconst notificationData = {\n  workflow_type: 'email_notifications',\n  trigger_source: 'matching_completed',\n  users_processed: webhookData.users_processed,\n  matches_created: webhookData.matches_created,\n  timestamp: new Date().toISOString(),\n  webhook_data: webhookData\n};\n\nreturn [{ json: notificationData }];"
      },
      "name": "Process Notification Trigger",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        460,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json.skip_notifications}}",
              "value2": true
            }
          ]
        }
      },
      "name": "Should Skip Notifications?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        680,
        300
      ]
    },
    {
      "parameters": {
        "url": "http://host.docker.internal:8000/api/send-notifications",
        "options": {
          "timeout": 300000
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        }
      },
      "name": "Send Email Notifications",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        900,
        200
      ]
    },
    {
      "parameters": {
        "functionCode": "// Skip notifications - log and exit\nconst data = $input.all()[0].json;\n\nconsole.log(`Skipping notifications: ${data.reason}`);\n\nreturn [{\n  json: {\n    workflow_completed: true,\n    skipped: true,\n    reason: data.reason,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "name": "Skip Notifications",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        900,
        400
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json.success}}",
              "value2": true
            }
          ]
        }
      },
      "name": "Check Email Success",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1120,
        200
      ]
    },
    {
      "parameters": {
        "functionCode": "// Email notifications sent successfully\nconst result = $input.all()[0].json;\n\nconsole.log(`Email notifications completed successfully:`);\nconsole.log(`- Emails sent: ${result.emails_sent}`);\nconsole.log(`- Users notified: ${result.users_notified}`);\n\n// Log completion\nconst completionData = {\n  workflow_type: 'notification_success',\n  emails_sent: result.emails_sent,\n  users_notified: result.users_notified,\n  timestamp: new Date().toISOString(),\n  pipeline_completed: true\n};\n\nreturn [{ json: completionData }];"
      },
      "name": "Process Email Success",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1340,
        100
      ]
    },
    {
      "parameters": {
        "functionCode": "// Email notifications failed\nconst result = $input.all()[0].json;\n\nconsole.error(`Email notifications failed:`);\nconsole.error(`Error: ${result.error}`);\n\n// Log error\nconst errorData = {\n  workflow_type: 'notification_error',\n  error: result.error,\n  timestamp: new Date().toISOString()\n};\n\nreturn [{ json: errorData }];"
      },
      "name": "Process Email Error",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1340,
        300
      ]
    },
    {
      "parameters": {
        "functionCode": "// Complete pipeline logging\nconst result = $input.all()[0].json;\n\nconsole.log('='.repeat(50));\nconsole.log('LOAN MATCHING PIPELINE COMPLETED');\nconsole.log('='.repeat(50));\nconsole.log(`‚úÖ Pipeline Status: SUCCESS`);\nconsole.log(`üìß Emails Sent: ${result.emails_sent}`);\nconsole.log(`üë• Users Notified: ${result.users_notified}`);\nconsole.log(`‚è∞ Completed At: ${result.timestamp}`);\nconsole.log('='.repeat(50));\n\n// Final completion status\nconst finalStatus = {\n  pipeline_status: 'completed',\n  success: true,\n  emails_sent: result.emails_sent,\n  users_notified: result.users_notified,\n  completed_at: result.timestamp\n};\n\nreturn [{ json: finalStatus }];"
      },
      "name": "Complete Pipeline",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1560,
        100
      ]
    }
  ],
  "connections": {
    "Notification Webhook": {
      "main": [
        [
          {
            "node": "Process Notification Trigger",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Notification Trigger": {
      "main": [
        [
          {
            "node": "Should Skip Notifications?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Should Skip Notifications?": {
      "main": [
        [
          {
            "node": "Skip Notifications",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send Email Notifications",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Email Notifications": {
      "main": [
        [
          {
            "node": "Check Email Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Email Success": {
      "main": [
        [
          {
            "node": "Process Email Success",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Process Email Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Email Success": {
      "main": [
        [
          {
            "node": "Complete Pipeline",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {},
  "id": "3"
}
