{
  "name": "User Notification Workflow",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "value": "0 */6 * * *"
            }
          ]
        }
      },
      "id": "schedule-trigger-notification",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [
        240,
        300
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT DISTINCT u.user_id, u.email, u.monthly_income, u.credit_score, COUNT(m.id) as match_count, MAX(m.created_at) as latest_match FROM users u JOIN matches m ON u.user_id = m.user_id WHERE m.created_at > NOW() - INTERVAL '6 hours' AND u.user_id NOT IN (SELECT DISTINCT user_id FROM email_notifications WHERE sent_at > NOW() - INTERVAL '6 hours') GROUP BY u.user_id, u.email, u.monthly_income, u.credit_score HAVING COUNT(m.id) > 0 ORDER BY match_count DESC"
      },
      "id": "fetch-users-with-new-matches",
      "name": "Fetch Users with New Matches",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        460,
        300
      ],
      "credentials": {
        "postgres": {
          "id": "postgres-main-db",
          "name": "PostgreSQL Main Database"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Process each user and prepare notification data\nconst users = $input.all();\nconst notifications = [];\n\nfor (const user of users) {\n  // Get detailed match information for this user\n  const matchQuery = `\n    SELECT m.*, lp.product_name, lp.provider, lp.interest_rate, \n           lp.min_amount, lp.max_amount, lp.tenure_months, lp.url\n    FROM matches m\n    JOIN loan_products lp ON m.product_id = lp.id\n    WHERE m.user_id = '${user.user_id}'\n    AND m.created_at > NOW() - INTERVAL '6 hours'\n    ORDER BY m.match_score DESC\n    LIMIT 5\n  `;\n  \n  notifications.push({\n    json: {\n      user_id: user.user_id,\n      email: user.email,\n      monthly_income: user.monthly_income,\n      credit_score: user.credit_score,\n      match_count: user.match_count,\n      latest_match: user.latest_match,\n      match_query: matchQuery\n    }\n  });\n}\n\nconsole.log(`Prepared ${notifications.length} notifications`);\nreturn notifications;"
      },
      "id": "prepare-notification-data",
      "name": "Prepare Notification Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        680,
        300
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT m.*, lp.product_name, lp.provider, lp.interest_rate, lp.min_amount, lp.max_amount, lp.tenure_months, lp.url FROM matches m JOIN loan_products lp ON m.product_id = lp.id WHERE m.user_id = $1 AND m.created_at > NOW() - INTERVAL '6 hours' ORDER BY m.match_score DESC LIMIT 5"
      },
      "id": "fetch-user-matches",
      "name": "Fetch User Matches",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        900,
        300
      ],
      "credentials": {
        "postgres": {
          "id": "postgres-main-db",
          "name": "PostgreSQL Main Database"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Generate personalized email content\nconst userData = $input.first().json;\nconst matches = $input.all().map(item => item.json);\n\nif (matches.length === 0) {\n  return [];\n}\n\n// Create email subject\nconst subject = `ðŸŽ‰ You have ${matches.length} new loan match${matches.length > 1 ? 'es' : ''}!`;\n\n// Create email body\nlet body = `\n<html>\n<head>\n  <style>\n    body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\n    .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; text-align: center; }\n    .content { padding: 20px; }\n    .match-card { border: 1px solid #e2e8f0; border-radius: 8px; padding: 15px; margin: 10px 0; background: #f7fafc; }\n    .match-score { background: #667eea; color: white; padding: 5px 10px; border-radius: 15px; font-weight: bold; }\n    .cta-button { background: #667eea; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; display: inline-block; margin: 10px 0; }\n    .footer { background: #f7fafc; padding: 15px; text-align: center; color: #718096; font-size: 0.9em; }\n  </style>\n</head>\n<body>\n  <div class=\"header\">\n    <h1>ðŸŽ¯ Loan Eligibility Engine</h1>\n    <p>Great news! We found ${matches.length} loan product${matches.length > 1 ? 's' : ''} that match your profile.</p>\n  </div>\n  \n  <div class=\"content\">\n    <h2>Hello!</h2>\n    <p>Based on your profile (Credit Score: ${userData.credit_score || 'N/A'}, Monthly Income: $${userData.monthly_income ? userData.monthly_income.toLocaleString() : 'N/A'}), we've identified the following loan opportunities:</p>\n    \n    <div style=\"margin: 20px 0;\">\n`;\n\n// Add each match\nmatches.forEach((match, index) => {\n  body += `\n      <div class=\"match-card\">\n        <h3>${match.product_name}</h3>\n        <p><strong>Provider:</strong> ${match.provider}</p>\n        <p><strong>Interest Rate:</strong> ${match.interest_rate}% APR</p>\n        <p><strong>Loan Amount:</strong> $${match.min_amount ? match.min_amount.toLocaleString() : 'N/A'} - $${match.max_amount ? match.max_amount.toLocaleString() : 'N/A'}</p>\n        <p><strong>Tenure:</strong> ${match.tenure_months} months</p>\n        <p><strong>Match Score:</strong> <span class=\"match-score\">${match.match_score.toFixed(1)}%</span></p>\n        <p><strong>Why this matches:</strong> ${match.match_reasons ? match.match_reasons.join(', ') : 'Based on your profile criteria'}</p>\n        <a href=\"${match.url || '#'}\" class=\"cta-button\">Learn More</a>\n      </div>\n  `;\n});\n\nbody += `\n    </div>\n    \n    <p><strong>Next Steps:</strong></p>\n    <ul>\n      <li>Review the loan details above</li>\n      <li>Click \"Learn More\" to visit the lender's website</li>\n      <li>Compare rates and terms before applying</li>\n      <li>Contact the lender directly for application</li>\n    </ul>\n    \n    <p><strong>Important:</strong> These are pre-qualified offers based on your profile. Final approval and terms are subject to the lender's verification process.</p>\n  </div>\n  \n  <div class=\"footer\">\n    <p>This email was sent by the Loan Eligibility Engine.</p>\n    <p>If you no longer wish to receive these notifications, please contact support.</p>\n  </div>\n</body>\n</html>\n`;\n\nreturn [{\n  json: {\n    user_id: userData.user_id,\n    email: userData.email,\n    subject: subject,\n    body: body,\n    match_count: matches.length,\n    matches: matches\n  }\n}];"
      },
      "id": "generate-email-content",
      "name": "Generate Email Content",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1120,
        300
      ]
    },
    {
      "parameters": {
        "fromEmail": "noreply@loaneligibility.com",
        "toEmail": "={{ $json.email }}",
        "subject": "={{ $json.subject }}",
        "message": "={{ $json.body }}",
        "options": {
          "allowUnauthorizedCerts": true
        }
      },
      "id": "send-email",
      "name": "Send Email",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2,
      "position": [
        1340,
        300
      ],
      "credentials": {
        "emailSend": {
          "id": "email-smtp",
          "name": "SMTP Email"
        }
      }
    },
    {
      "parameters": {
        "operation": "insert",
        "schema": "public",
        "table": "email_notifications",
        "columns": "user_id,email,subject,body,status,match_count",
        "additionalFields": {}
      },
      "id": "log-email-sent",
      "name": "Log Email Sent",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        1560,
        300
      ],
      "credentials": {
        "postgres": {
          "id": "postgres-main-db",
          "name": "PostgreSQL Main Database"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Log notification summary\nconst notifications = $input.all();\nconst totalSent = notifications.length;\nconst totalUsers = new Set(notifications.map(n => n.json.user_id)).size;\n\nconsole.log(`Notification Summary:`);\nconsole.log(`- Total emails sent: ${totalSent}`);\nconsole.log(`- Unique users notified: ${totalUsers}`);\nconsole.log(`- Timestamp: ${new Date().toISOString()}`);\n\nreturn [{\n  json: {\n    operation: 'user_notification',\n    status: 'completed',\n    emails_sent: totalSent,\n    users_notified: totalUsers,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "log-notification-summary",
      "name": "Log Notification Summary",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1780,
        300
      ]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "url": "https://hooks.slack.com/services/YOUR_SLACK_WEBHOOK_URL",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "text",
              "value": "ðŸ“§ User Notification Summary: {{ $json.emails_sent }} emails sent to {{ $json.users_notified }} users"
            }
          ]
        }
      },
      "id": "slack-notification",
      "name": "Slack Notification",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        2000,
        300
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Fetch Users with New Matches",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Users with New Matches": {
      "main": [
        [
          {
            "node": "Prepare Notification Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Notification Data": {
      "main": [
        [
          {
            "node": "Fetch User Matches",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch User Matches": {
      "main": [
        [
          {
            "node": "Generate Email Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Email Content": {
      "main": [
        [
          {
            "node": "Send Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Email": {
      "main": [
        [
          {
            "node": "Log Email Sent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Email Sent": {
      "main": [
        [
          {
            "node": "Log Notification Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Notification Summary": {
      "main": [
        [
          {
            "node": "Slack Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "id": "user-notification-workflow",
  "tags": [
    {
      "createdAt": "2024-01-01T00:00:00.000Z",
      "updatedAt": "2024-01-01T00:00:00.000Z",
      "id": "notification",
      "name": "notification"
    }
  ]
}
