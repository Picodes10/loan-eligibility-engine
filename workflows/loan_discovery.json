{
  "name": "Loan Product Discovery Workflow",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "value": "0 2 * * *"
            }
          ]
        }
      },
      "id": "f8c1e5a0-1234-4567-8901-234567890abc",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [
        240,
        300
      ]
    },
    {
      "parameters": {
        "url": "https://www.bankbazaar.com/personal-loan.html",
        "responseFormat": "text",
        "options": {
          "headers": {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
          }
        }
      },
      "id": "a1b2c3d4-5678-9012-3456-789012345678",
      "name": "Scrape BankBazaar",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        460,
        200
      ]
    },
    {
      "parameters": {
        "url": "https://www.policybazaar.com/personal-loan/",
        "responseFormat": "text",
        "options": {
          "headers": {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
          }
        }
      },
      "id": "b2c3d4e5-6789-0123-4567-890123456789",
      "name": "Scrape PolicyBazaar",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        460,
        400
      ]
    },
    {
      "parameters": {
        "jsCode": "// Parse BankBazaar HTML content\nconst cheerio = require('cheerio');\nconst html = $input.all()[0].json.data;\nconst $ = cheerio.load(html);\n\nconst products = [];\n\n// Extract loan product information\n$('.loan-card, .product-card, .bank-card').each((i, element) => {\n  const $el = $(element);\n  \n  const productName = $el.find('.product-name, .loan-name, h3, h4').first().text().trim();\n  const provider = $el.find('.bank-name, .provider, .lender').first().text().trim();\n  const interestRate = $el.find('.interest-rate, .rate').first().text().replace(/[^\\d.]/g, '') || null;\n  const minAmount = $el.find('.min-amount, .amount-range').first().text().replace(/[^\\d]/g, '') || null;\n  const maxAmount = $el.find('.max-amount').first().text().replace(/[^\\d]/g, '') || null;\n  \n  if (productName && provider) {\n    products.push({\n      product_name: productName,\n      provider: provider,\n      interest_rate: interestRate ? parseFloat(interestRate) : null,\n      min_amount: minAmount ? parseInt(minAmount) : null,\n      max_amount: maxAmount ? parseInt(maxAmount) : null,\n      min_income: 25000, // Default minimum income\n      min_credit_score: 650, // Default minimum credit score\n      max_credit_score: 850,\n      min_age: 21,\n      max_age: 65,\n      employment_required: true,\n      tenure_months: 60,\n      url: 'https://www.bankbazaar.com/personal-loan.html',\n      eligibility_criteria: {\n        source: 'BankBazaar',\n        scraped_at: new Date().toISOString()\n      }\n    });\n  }\n});\n\n// Fallback: Create sample products if scraping fails\nif (products.length === 0) {\n  products.push(\n    {\n      product_name: 'BankBazaar Personal Loan',\n      provider: 'HDFC Bank',\n      interest_rate: 10.50,\n      min_amount: 50000,\n      max_amount: 4000000,\n      min_income: 30000,\n      min_credit_score: 700,\n      max_credit_score: 850,\n      min_age: 21,\n      max_age: 65,\n      employment_required: true,\n      tenure_months: 60,\n      url: 'https://www.bankbazaar.com/personal-loan.html',\n      eligibility_criteria: {\n        source: 'BankBazaar',\n        features: ['Quick processing', 'Minimal documentation']\n      }\n    },\n    {\n      product_name: 'Instant Personal Loan',\n      provider: 'ICICI Bank',\n      interest_rate: 11.25,\n      min_amount: 25000,\n      max_amount: 2000000,\n      min_income: 25000,\n      min_credit_score: 650,\n      max_credit_score: 850,\n      min_age: 18,\n      max_age: 60,\n      employment_required: true,\n      tenure_months: 72,\n      url: 'https://www.bankbazaar.com/personal-loan.html',\n      eligibility_criteria: {\n        source: 'BankBazaar',\n        features: ['Instant approval', 'Digital process']\n      }\n    }\n  );\n}\n\nreturn products.map(product => ({ json: product }));"
      },
      "id": "c3d4e5f6-7890-1234-5678-901234567890",
      "name": "Parse BankBazaar Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        680,
        200
      ]
    },
    {
      "parameters": {
        "jsCode": "// Parse PolicyBazaar HTML content\nconst cheerio = require('cheerio');\nconst html = $input.all()[0].json.data;\nconst $ = cheerio.load(html);\n\nconst products = [];\n\n// Extract loan product information\n$('.loan-provider, .bank-tile, .lender-card').each((i, element) => {\n  const $el = $(element);\n  \n  const productName = $el.find('.loan-name, .product-title, h3').first().text().trim();\n  const provider = $el.find('.bank-name, .lender-name').first().text().trim();\n  const interestRate = $el.find('.interest, .rate, .apr').first().text().replace(/[^\\d.]/g, '') || null;\n  const processingFee = $el.find('.fee, .charges').first().text() || null;\n  \n  if (productName && provider) {\n    products.push({\n      product_name: productName,\n      provider: provider,\n      interest_rate: interestRate ? parseFloat(interestRate) : null,\n      min_amount: 100000,\n      max_amount: 5000000,\n      min_income: 30000,\n      min_credit_score: 650,\n      max_credit_score: 850,\n      min_age: 21,\n      max_age: 65,\n      employment_required: true,\n      tenure_months: 48,\n      url: 'https://www.policybazaar.com/personal-loan/',\n      eligibility_criteria: {\n        source: 'PolicyBazaar',\n        processing_fee: processingFee,\n        scraped_at: new Date().toISOString()\n      }\n    });\n  }\n});\n\n// Fallback: Create sample products if scraping fails\nif (products.length === 0) {\n  products.push(\n    {\n      product_name: 'PolicyBazaar Personal Loan',\n      provider: 'Axis Bank',\n      interest_rate: 12.00,\n      min_amount: 75000,\n      max_amount: 3500000,\n      min_income: 35000,\n      min_credit_score: 675,\n      max_credit_score: 850,\n      min_age: 23,\n      max_age: 58,\n      employment_required: true,\n      tenure_months: 60,\n      url: 'https://www.policybazaar.com/personal-loan/',\n      eligibility_criteria: {\n        source: 'PolicyBazaar',\n        features: ['Competitive rates', 'Flexible tenure']\n      }\n    },\n    {\n      product_name: 'Quick Approval Loan',\n      provider: 'Kotak Mahindra Bank',\n      interest_rate: 13.50,\n      min_amount: 50000,\n      max_amount: 1500000,\n      min_income: 20000,\n      min_credit_score: 600,\n      max_credit_score: 800,\n      min_age: 21,\n      max_age: 65,\n      employment_required: false,\n      tenure_months: 36,\n      url: 'https://www.policybazaar.com/personal-loan/',\n      eligibility_criteria: {\n        source: 'PolicyBazaar',\n        features: ['Quick processing', 'Minimal paperwork']\n      }\n    }\n  );\n}\n\nreturn products.map(product => ({ json: product }));"
      },
      "id": "d4e5f6g7-8901-2345-6789-012345678901",
      "name": "Parse PolicyBazaar Data",\n      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        680,
        400
      ]
    },
    {
      "parameters": {},
      "id": "e5f6g7h8-9012-3456-7890-123456789012",
      "name": "Merge Products",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        900,
        300
      ]
    },
    {
      "parameters": {
        "operation": "insert",
        "schema": "public",
        "table": "loan_products",
        "columns": "product_name,provider,interest_rate,min_amount,max_amount,min_income,min_credit_score,max_credit_score,min_age,max_age,employment_required,tenure_months,url,eligibility_criteria",
        "additionalFields": {
          "mode": "upsert",
          "upsertColumns": "product_name,provider"
        }
      },
      "id": "f6g7h8i9-0123-4567-8901-234567890123",
      "name": "Store in Database",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        1120,
        300
      ],
      "credentials": {
        "postgres": {
          "id": "postgres-main-db",
          "name": "PostgreSQL Main Database"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Log the scraping results\nconst inputData = $input.all();\nconst totalProducts = inputData.length;\n\nconsole.log(`Product Discovery Completed: ${totalProducts} products processed`);\n\n// Return summary for logging\nreturn [{\n  json: {\n    operation: 'product_discovery',\n    status: 'completed',\n    products_discovered: totalProducts,\n    timestamp: new Date().toISOString(),\n    sources: ['BankBazaar', 'PolicyBazaar']\n  }\n}];"
      },
      "id": "g7h8i9j0-1234-5678-9012-345678901234",
      "name": "Log Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1340,
        300
      ]
    },
    {
      "parameters": {
        "url": "https://www.lendingkart.com/personal-loan",
        "responseFormat": "text",
        "options": {
          "headers": {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
          }
        }
      },
      "id": "h8i9j0k1-2345-6789-0123-456789012345",
      "name": "Scrape LendingKart",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        460,
        600
      ]
    },
    {
      "parameters": {
        "jsCode": "// Parse LendingKart HTML content\nconst cheerio = require('cheerio');\nconst html = $input.all()[0].json.data;\nconst $ = cheerio.load(html);\n\nconst products = [];\n\n// Extract loan product information\n$('.product-card, .loan-option').each((i, element) => {\n  const $el = $(element);\n  \n  const productName = $el.find('h3, .title').first().text().trim() || 'LendingKart Personal Loan';\n  const provider = 'LendingKart';\n  const interestRate = $el.find('.rate, .interest').first().text().replace(/[^\\d.]/g, '') || '14.50';\n  \n  products.push({\n    product_name: productName,\n    provider: provider,\n    interest_rate: parseFloat(interestRate),\n    min_amount: 100000,\n    max_amount: 2500000,\n    min_income: 25000,\n    min_credit_score: 600,\n    max_credit_score: 850,\n    min_age: 21,\n    max_age: 65,\n    employment_required: true,\n    tenure_months: 48,\n    url: 'https://www.lendingkart.com/personal-loan',\n    eligibility_criteria: {\n      source: 'LendingKart',\n      features: ['Quick disbursal', 'Competitive rates'],\n      scraped_at: new Date().toISOString()\n    }\n  });\n});\n\n// Fallback product if scraping fails\nif (products.length === 0) {\n  products.push({\n    product_name: 'Business Personal Loan',\n    provider: 'LendingKart',\n    interest_rate: 14.50,\n    min_amount: 100000,\n    max_amount: 2500000,\n    min_income: 25000,\n    min_credit_score: 600,\n    max_credit_score: 850,\n    min_age: 21,\n    max_age: 65,\n    employment_required: true,\n    tenure_months: 48,\n    url: 'https://www.lendingkart.com/personal-loan',\n    eligibility_criteria: {\n      source: 'LendingKart',\n      features: ['For business owners', 'Fast approval']\n    }\n  });\n}\n\nreturn products.map(product => ({ json: product }));"
      },
      "id": "i9j0k1l2-3456-7890-1234-567890123456",
      "name": "Parse LendingKart Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        680,
        600
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Scrape BankBazaar",
            "type": "main",
            "index": 0
          },
          {
            "node": "Scrape PolicyBazaar",
            "type": "main",
            "index": 0
          },
          {
            "node": "Scrape LendingKart",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Scrape BankBazaar": {
      "main": [
        [
          {
            "node": "Parse BankBazaar Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Scrape PolicyBazaar": {
      "main": [
        [
          {
            "node": "Parse PolicyBazaar Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Scrape LendingKart": {
      "main": [
        [
          {
            "node": "Parse LendingKart Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse BankBazaar Data": {
      "main": [
        [
          {
            "node": "Merge Products",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse PolicyBazaar Data": {
      "main": [
        [
          {
            "node": "Merge Products",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Parse LendingKart Data": {
      "main": [
        [
          {
            "node": "Merge Products",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Merge Products": {
      "main": [
        [
          {
            "node": "Store in Database",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store in Database": {
      "main": [
        [
          {
            "node": "Log Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {},
  "versionId": "1",
  "id": "workflow-a-product-discovery"
}
